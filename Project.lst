Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/02/22 00:46:58
<Project 6: String Primitives and Macros     (Proj6_bearan.a  Page 1 - 1


				TITLE Project 6: String Primitives and Macros     (Proj6_bearan.asm)

				; Author: Andrew Bear
				; Last Modified: 27Feb2022
				; OSU email address: bearan@oregonstate.edu
				; Course number/section:   CS271 Section 406
				; Project Number: 6                Due Date: 13Mar2022
				; Description:	This program centers around the creation of two procedures - ReadVal and WriteVal 
				; that mimic the Irvine Library ReadInt and WriteInt, using macros and string primitives to achieve 
				; this functionality without using any int- or dec-writing irvine prodecures. 

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				; (insert macro definitions here)

				;---------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Outputs prompt, and calls Irvine ReadString to read response into memory
				;
				; Receives: prompt -- OFFSET of prompt to display
				;			targetLoc -- output location 
				;			maxLength -- Length of user input (required for Irvine ReadString)
				; Returns: screen output of string
				;----------------------------------------------------------------------------------------------
				;mGetString MACRO prompt, targetLoc, maxLength
				mGetString MACRO targetLoc, maxLength
					PUSH	EAX
					PUSH	ECX						; preserve registers
					PUSH	EDX

				;	mDisplayString prompt

				; set up and call ReadString
					MOV		EDX, targetLoc			; set up and call ReadString
					MOV		ECX, maxLength
					CALL	ReadString


					POP		EDX
					POP		ECX
					POP		EAX
				ENDM


				;---------------------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Calls WriteString on the supplied address
				;
				; Receives: OFFSET of string to display
				; Returns: screen output of string
				;----------------------------------------------------------------------------------------------
				mDisplayString MACRO stringOffset		; param - offset of string to print
					PUSH	EDX							; uses EDX so we protect it

					MOV		EDX, stringOffset			; standard writeString call
					CALL	WriteString

					POP		EDX
				ENDM

				; (insert constant definitions here)

 = 00000005			ARRAYLENGTH		=	5
 = 0000000B			MAXCHARS		=	11					; a SDWORD int can only be 11 chars long, -2,147,483,648, plus padding 0

 = 00000010			USERSTRLENGTH	=	16


 00000000			.data

				; greeting/program/exit prompts
 00000000 50 72 6F 6A 65	greeting	BYTE	"Project 6: String Primitives and Macros.",13,10
	   63 74 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 2E
	   0D 0A
 0000002A  50 72 6F 67 72				BYTE	"Programmed by A. Bear",13,10,13,10
	   61 6D 6D 65 64
	   20 62 79 20 41
	   2E 20 42 65 61
	   72 0D 0A 0D 0A
 00000043  2A 2A 45 43 3A				BYTE	"**EC: Numbers the entry lines and displays a running sum.",13,10
	   20 4E 75 6D 62
	   65 72 73 20 74
	   68 65 20 65 6E
	   74 72 79 20 6C
	   69 6E 65 73 20
	   61 6E 64 20 64
	   69 73 70 6C 61
	   79 73 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   6D 2E 0D 0A
 0000007E  2A 2A 45 43 3A				BYTE	"**EC: HAHAHAHAAH MAYBE IN ANOTHER LIFE.",13,10,13,10
	   20 48 41 48 41
	   48 41 48 41 41
	   48 20 4D 41 59
	   42 45 20 49 4E
	   20 41 4E 4F 54
	   48 45 52 20 4C
	   49 46 45 2E 0D
	   0A 0D 0A
 000000A9  54 68 69 73 20				BYTE	"This program will ask you for 10 signed decimal integers.",13,10
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 61 73
	   6B 20 79 6F 75
	   20 66 6F 72 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A
 000000E4  45 61 63 68 20				BYTE	"Each integer must fit into a 32-bit register (-2,147,483,648 to 2,147,483,647).",13,10
	   69 6E 74 65 67
	   65 72 20 6D 75
	   73 74 20 66 69
	   74 20 69 6E 74
	   6F 20 61 20 33
	   32 2D 62 69 74
	   20 72 65 67 69
	   73 74 65 72 20
	   28 2D 32 2C 31
	   34 37 2C 34 38
	   33 2C 36 34 38
	   20 74 6F 20 32
	   2C 31 34 37 2C
	   34 38 33 2C 36
	   34 37 29 2E 0D
	   0A
 00000135  4F 6E 63 65 20				BYTE	"Once you're done entering integers, the program will display a list",13,10
	   79 6F 75 27 72
	   65 20 64 6F 6E
	   65 20 65 6E 74
	   65 72 69 6E 67
	   20 69 6E 74 65
	   67 65 72 73 2C
	   20 74 68 65 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 0D 0A
 0000017A  6F 66 20 74 68				BYTE	"of the integers, the sum of the integers, and the average of the values.",13,10
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 74 68 65
	   20 73 75 6D 20
	   6F 66 20 74 68
	   65 20 69 6E 74
	   65 67 65 72 73
	   2C 20 61 6E 64
	   20 74 68 65 20
	   61 76 65 72 61
	   67 65 20 6F 66
	   20 74 68 65 20
	   76 61 6C 75 65
	   73 2E 0D 0A
 000001C4  53 61 6C 6D 6F				BYTE	"Salmon on the bank / curing in the sun for days / eat them up yum yum ~A bear",13,10,13,10,0
	   6E 20 6F 6E 20
	   74 68 65 20 62
	   61 6E 6B 20 2F
	   20 63 75 72 69
	   6E 67 20 69 6E
	   20 74 68 65 20
	   73 75 6E 20 66
	   6F 72 20 64 61
	   79 73 20 2F 20
	   65 61 74 20 74
	   68 65 6D 20 75
	   70 20 79 75 6D
	   20 79 75 6D 20
	   7E 41 20 62 65
	   61 72 0D 0A 0D
	   0A 00
 00000216 3A 20 50 6C 65	numEntry	BYTE	": Please enter a signed integer: ",0
	   61 73 65 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 69
	   6E 74 65 67 65
	   72 3A 20 00
 00000238 53 6F 6D 65 74	invalidNum	BYTE	"Something's wrong with your entry. Please try again.",13,10,0
	   68 69 6E 67 27
	   73 20 77 72 6F
	   6E 67 20 77 69
	   74 68 20 79 6F
	   75 72 20 65 6E
	   74 72 79 2E 20
	   50 6C 65 61 73
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 2E 0D 0A 00
 0000026F 0D 0A 48 65 72	numsEntered	BYTE	13,10,"Here are your numbers, all in a nice row:",13,10,0
	   65 20 61 72 65
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 73 2C 20
	   61 6C 6C 20 69
	   6E 20 61 20 6E
	   69 63 65 20 72
	   6F 77 3A 0D 0A
	   00
 0000029D 0D 0A 54 68 65	numSum		BYTE	13,10,"The sum of your numbers is: ",0
	   20 73 75 6D 20
	   6F 66 20 79 6F
	   75 72 20 6E 75
	   6D 62 65 72 73
	   20 69 73 3A 20
	   00
 000002BC 0D 0A 54 68 65	numAverage	BYTE	13,10,"The truncated average of your numbers is: ",0
	   20 74 72 75 6E
	   63 61 74 65 64
	   20 61 76 65 72
	   61 67 65 20 6F
	   66 20 79 6F 75
	   72 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 000002E9 0D 0A 0D 0A 47	byePrompt	BYTE	13,10,13,10,"Goodbye, and thanks for all the fish! ROAR!",13,10,0
	   6F 6F 64 62 79
	   65 2C 20 61 6E
	   64 20 74 68 61
	   6E 6B 73 20 66
	   6F 72 20 61 6C
	   6C 20 74 68 65
	   20 66 69 73 68
	   21 20 52 4F 41
	   52 21 0D 0A 00

 0000031B 59 6F 75 27 76	enteredVals	BYTE	"You've entered this many values: ",0
	   65 20 65 6E 74
	   65 72 65 64 20
	   74 68 69 73 20
	   6D 61 6E 79 20
	   76 61 6C 75 65
	   73 3A 20 00
 0000033D 59 6F 75 72 20	subTotMsg	BYTE	"Your subtotal so far is: ",0
	   73 75 62 74 6F
	   74 61 6C 20 73
	   6F 20 66 61 72
	   20 69 73 3A 20
	   00

 00000357 5B 00			oBracket	BYTE	"[",0
 00000359 5D 00			cBracket	BYTE	"]",0
 0000035B 2C 20 00		comma		BYTE	", ",0
 0000035E 0D 0A 00		linebreak	BYTE	13,10,0

 00000361 2D 00			negSign		BYTE	"-",0

				; variables
 00000363  00000005 [		numArray	SDWORD	ARRAYLENGTH DUP(?)			; 10
	    00000000
	   ]


				; variables for readVal
 00000377 2D 32 31 34 37	specialNum	BYTE	"-2147483648",0,0,0,0,0,0   ; This damn number. Plus padding zeroes
	   34 38 33 36 34
	   38 00 00 00 00
	   00 00
 00000388 00000000		validVal	SDWORD	0
 0000038C 00000000		userVal		SDWORD	0							; user's converted value will be here
 00000390  00000010 [		userString	BYTE	USERSTRLENGTH DUP(?)		; 16
	    00
	   ]
 000003A0  00000005 [		padding		BYTE	5 DUP(0)					; don't want overrun by some fluke
	    00
	   ]

				; variables for writeVal
 000003A5  0000000D [		tempArray	BYTE	(MAXCHARS + 2) DUP(0)		; array used as scratch by writeVal -- 12 characters, plus padding 0
	    00
	   ]


				; EC variables
 000003B2 00000000		runTotal	SDWORD	?

				; final calcs
 000003B6 00000000		sumValues	DWORD	?
 000003BA 00000000		avgValues	DWORD	?






 00000000			.code
 00000000			main PROC
				; display greeting prompt
					mDisplayString	OFFSET greeting
 00000000  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET greeting			; standard writeString call
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX

				 COMMENT &					; testing mgetstring
					CALL	crlf
					mGetString	OFFSET userString, USERSTRLENGTH
					caLL crlf
					mdisplayString	OFFSET userString
					call crlf
				;	mov	EAX, uStrLen
				;	call WriteInt
					call crlf


					PUSH	OFFSET tempArray
					PUSH	-4200
					CALL	writeVal
					call	Crlf

				&





				; here is loop to fill array
 0000000C  BF 00000363 R		MOV		EDI, OFFSET numArray
 00000011  B9 00000001			MOV		ECX, 1
 00000016			_fillArray:
				; number the output line and display prompt
 00000016  8B C1			MOV		EAX, ECX

 00000018  68 000003A5 R		PUSH	OFFSET tempArray				; scratch array for working in
 0000001D  50				PUSH	EAX								; push value to print out
 0000001E  E8 00000212			CALL	writeVal						; actual CALL


				; call read procedure, store result in array
					mDisplayString	OFFSET numEntry			; output number entry prompt
 00000023  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000024  BA 00000216 R     1		MOV		EDX, OFFSET numEntry			; standard writeString call
 00000029  E8 00000000 E     1		CALL	WriteString
 0000002E  5A		     1		POP		EDX
				;	CALL	Readint							; READVAL GOES HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

 0000002F  68 00000377 R		PUSH	OFFSET specialNum				; EBP+20
 00000034  68 00000388 R		PUSH	OFFSET validVal					; EBP+16
 00000039  68 0000038C R		PUSH	OFFSET userVal					; EBP+12
 0000003E  68 0000031B R		PUSH	OFFSET enteredVals				; ebp+8
 00000043  E8 00000107			CALL	readVal

				; check result boolean for valid value

				;	print test for validval
				;	MOV		EAX, validVal
				;	CALL	writeint

 00000048  83 3D 00000388 R		CMP		validVal, 1
	   01
 0000004F  74 0E			JE		_validValue

				; invalid value found, ask again:
					mDisplayString OFFSET invalidNum
 00000051  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000052  BA 00000238 R     1		MOV		EDX, OFFSET invalidNum			; standard writeString call
 00000057  E8 00000000 E     1		CALL	WriteString
 0000005C  5A		     1		POP		EDX
 0000005D  EB B7			JMP		_fillArray

 0000005F			_validValue:
 0000005F  A1 0000038C R		MOV		EAX, userVal
					
 00000064  89 07			MOV		[EDI], EAX

 00000066  01 05 000003B2 R		ADD		runTotal, EAX
					
 0000006C  41				INC		ECX								; next loop value
 0000006D  83 C7 04			ADD		EDI, TYPE numArray

 00000070  83 F9 05			CMP		ECX, ARRAYLENGTH
 00000073  7F 39			JG		_doneFill


				; Display running subtotal
					mDisplayString	OFFSET subTotMsg
 00000075  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000076  BA 0000033D R     1		MOV		EDX, OFFSET subTotMsg			; standard writeString call
 0000007B  E8 00000000 E     1		CALL	WriteString
 00000080  5A		     1		POP		EDX
 00000081  A1 000003B2 R		MOV		EAX, runTotal

 00000086  68 000003A5 R		PUSH	OFFSET tempArray				; scratch array for working in
 0000008B  50				PUSH	EAX								; push value to print out
 0000008C  E8 000001A4			CALL	writeVal						; actual CALL

					mDisplayString	OFFSET linebreak
 00000091  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000092  BA 0000035E R     1		MOV		EDX, OFFSET linebreak			; standard writeString call
 00000097  E8 00000000 E     1		CALL	WriteString
 0000009C  5A		     1		POP		EDX
					mDisplayString	OFFSET linebreak
 0000009D  52		     1		PUSH	EDX							; uses EDX so we protect it
 0000009E  BA 0000035E R     1		MOV		EDX, OFFSET linebreak			; standard writeString call
 000000A3  E8 00000000 E     1		CALL	WriteString
 000000A8  5A		     1		POP		EDX

 000000A9  E9 FFFFFF68			JMP		_fillArray

 000000AE			_doneFill:




				; display array + calc sum of elements

					mDisplayString	OFFSET numsEntered
 000000AE  52		     1		PUSH	EDX							; uses EDX so we protect it
 000000AF  BA 0000026F R     1		MOV		EDX, OFFSET numsEntered			; standard writeString call
 000000B4  E8 00000000 E     1		CALL	WriteString
 000000B9  5A		     1		POP		EDX
					
					mDisplayString	OFFSET oBracket
 000000BA  52		     1		PUSH	EDX							; uses EDX so we protect it
 000000BB  BA 00000357 R     1		MOV		EDX, OFFSET oBracket			; standard writeString call
 000000C0  E8 00000000 E     1		CALL	WriteString
 000000C5  5A		     1		POP		EDX

 000000C6  BE 00000363 R		MOV		ESI, OFFSET numArray			;offset of first element
 000000CB  B9 00000005			MOV		ECX, ARRAYLENGTH				; count of loops to run



 000000D0			_displayLoop:
 000000D0  AD				LODSD									; Val to EAX, Increment ESI by 4
 000000D1  01 05 000003B6 R		ADD		sumValues, EAX					
					
 000000D7  68 000003A5 R		PUSH	OFFSET tempArray				; scratch array for working in
 000000DC  50				PUSH	EAX								; push value to print out
 000000DD  E8 00000153			CALL	writeVal						; actual CALL


				; test if last loop, 
 000000E2  83 F9 01			CMP		ECX, 1
 000000E5  74 0E			JE		_endDisplay

				; if not, write comma and loop again
					mDisplayString	OFFSET comma
 000000E7  52		     1		PUSH	EDX							; uses EDX so we protect it
 000000E8  BA 0000035B R     1		MOV		EDX, OFFSET comma			; standard writeString call
 000000ED  E8 00000000 E     1		CALL	WriteString
 000000F2  5A		     1		POP		EDX
 000000F3  E2 DB			LOOP	_displayLoop

 000000F5			_endDisplay:
					mDisplayString	OFFSET cBracket			; print closing bracket
 000000F5  52		     1		PUSH	EDX							; uses EDX so we protect it
 000000F6  BA 00000359 R     1		MOV		EDX, OFFSET cBracket			; standard writeString call
 000000FB  E8 00000000 E     1		CALL	WriteString
 00000100  5A		     1		POP		EDX

				; here we display results
				; procedure to calculate sum/average

					mDisplayString 	OFFSET numSum			; sum prompt
 00000101  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000102  BA 0000029D R     1		MOV		EDX, OFFSET numSum			; standard writeString call
 00000107  E8 00000000 E     1		CALL	WriteString
 0000010C  5A		     1		POP		EDX

 0000010D  A1 000003B6 R		MOV		EAX,	sumValues				; sum to EAX

 00000112  68 000003A5 R		PUSH	OFFSET tempArray
 00000117  50				PUSH	EAX
 00000118  E8 00000118			CALL	writeVal

					mDisplayString	OFFSET numAverage		; avg prompt
 0000011D  52		     1		PUSH	EDX							; uses EDX so we protect it
 0000011E  BA 000002BC R     1		MOV		EDX, OFFSET numAverage			; standard writeString call
 00000123  E8 00000000 E     1		CALL	WriteString
 00000128  5A		     1		POP		EDX

 00000129  99				CDQ
 0000012A  BB 00000005			MOV		EBX,	ARRAYLENGTH
 0000012F  F7 FB			IDIV	EBX

 00000131  68 000003A5 R		PUSH	OFFSET tempArray				; scratch array for working in
 00000136  50				PUSH	EAX								; push value to print out
 00000137  E8 000000F9			CALL	writeVal						; actual CALL
					
					mDisplayString	OFFSET byePrompt
 0000013C  52		     1		PUSH	EDX							; uses EDX so we protect it
 0000013D  BA 000002E9 R     1		MOV		EDX, OFFSET byePrompt			; standard writeString call
 00000142  E8 00000000 E     1		CALL	WriteString
 00000147  5A		     1		POP		EDX

					Invoke	ExitProcess,0	; exit to operating system
 00000148  6A 00	   *	    push   +000000000h
 0000014A  E8 00000000 E   *	    call   ExitProcess
 0000014F			main ENDP


				; (insert additional procedures here)
				;---------------------------------------------------------------------------------------------
				; Name: readVal
				;
				; read value
				;
				; Preconditions: 
				; Postconditions: 
				; Receives:			[EBP + 20] -- our special boah -2147483648 in string form
				;					[EBP + 16] -- validVal boolean
				;					[EBP + 12] -- userVal variable; will be filled with SDWORD conversion
				;								  (iff successful!)
				;					[EBP + 8] -- userString; OFFSET of array to store the user's string 
				; Returns:			
				;----------------------------------------------------------------------------------------------
 0000014F			readVal PROC
				; prep stack, save registers
					LOCAL	isValid:DWORD, localValue:SDWORD, posOrNeg:DWORD, stringLength:DWORD, specialBoah:BYTE
 0000014F  55		   *	    push   ebp
 00000150  8B EC	   *	    mov    ebp, esp
 00000152  83 C4 EC	   *	    add    esp, 0FFFFFFECh
 00000155  60				PUSHAD

 00000156  C7 45 FC			MOV		isValid, 0
	   00000000
 0000015D  C7 45 F8			MOV		localValue, 0
	   00000000
 00000164  C7 45 F4			MOV		posOrNeg, 0								; -1 if first char is -, 1 if first char is +, 0 if first char is 0-9
	   00000000

				; get the string from the user woth mGetString
					mGetString	[EBP + 8], USERSTRLENGTH
 0000016B  50		     1		PUSH	EAX
 0000016C  51		     1		PUSH	ECX						; preserve registers
 0000016D  52		     1		PUSH	EDX
 0000016E  8B 55 08	     1		MOV		EDX, [EBP + 8]			; set up and call ReadString
 00000171  B9 00000010	     1		MOV		ECX, USERSTRLENGTH
 00000176  E8 00000000 E     1		CALL	ReadString
 0000017B  5A		     1		POP		EDX
 0000017C  59		     1		POP		ECX
 0000017D  58		     1		POP		EAX
					
 0000017E  E8 00000000 E		CALL crlf
					mdisplayString	[EBP + 8]
 00000183  52		     1		PUSH	EDX							; uses EDX so we protect it
 00000184  8B 55 08	     1		MOV		EDX, [EBP + 8]			; standard writeString call
 00000187  E8 00000000 E     1		CALL	WriteString
 0000018C  5A		     1		POP		EDX
 0000018D  E8 00000000 E		call crlf

				; ===============================================================
				; Here is the special case for -2147483648 string
				; ===============================================================
 00000192  FC				CLD		
 00000193  8B 7D 08			MOV		EDI, [EBP + 8]				; user string
 00000196  8B 75 14			MOV		ESI, [EBP + 20]				; bastard -2147483648 string

 00000199  B9 0000000C			MOV		ECX, 12
 0000019E			_scanForSpecial:
 0000019E  A6				CMPSB
 0000019F  75 12			JNE		_checkSign
 000001A1  E2 FB			LOOP	_scanForSpecial

				; rut roh, we found the thing!
 000001A3  C7 45 F8			MOV		localValue, -2147483648
	   80000000
 000001AA  C7 45 FC			MOV		isValid, 1
	   00000001
 000001B1  EB 6D			JMP		_storeNum

 000001B3			_checkSign:
				; ===============================================================
				; Here we test and set our personal sign flag
				; ===============================================================
 000001B3  8B 75 08			MOV		ESI, [EBP + 8]				; user string
 000001B6  B8 00000000			MOV		EAX, 0
 000001BB  AC				LODSB
 000001BC  83 F8 2B			CMP		EAX, 43						; is it an ASCII + symbol?
 000001BF  74 11			JE		_setPlus
 000001C1  83 F8 2D			CMP		EAX, 45						; is it an ASCII - symbol?
 000001C4  74 15			JE		_setMinus

 000001C6  83 F8 30			CMP		EAX, 48						; does the caracter come before ASCII 0?
 000001C9  72 5D			JB		_exitProcedure				; if so, terminaate with valid = 0

 000001CB  83 F8 39			CMP		EAX, 57						; does the caracter come after ASCII 9?
 000001CE  77 58			JA		_exitProcedure				; if so, terminaate with valid = 0

 000001D0  EB 10			JMP		_countString

 000001D2			_setPlus:
 000001D2  C7 45 F4			MOV		posOrNeg, 1					; set flag 1 and start parsing
	   00000001
 000001D9  EB 07			JMP		_countString

 000001DB			_setMinus:	
 000001DB  C7 45 F4			MOV		posOrNeg, -1				; set flag -1 and start parsing
	   FFFFFFFF


 000001E2			_countString:
				; ===============================================================
				; Here we count the length of the string
				; ===============================================================

 000001E2  8B 45 F4			MOV		EAX, PosOrNeg
 000001E5  E8 00000000 E		Call		Writeint


				; find string length:
 000001EA  B9 00000000			MOV		ECX, 0						; start at 0
 000001EF  8B 75 08			MOV		ESI, [EBP + 8]				; user string
 000001F2			_startCOunt:
 000001F2  B8 00000000			MOV		EAX, 0						; null EAX
 000001F7  AC				LODSB								
 000001F8  83 F8 00			CMP		EAX, 0						; if we find a null byte, terminate counting
 000001FB  74 03			JE		_doneCount

				; +1 to count and re-loop
 000001FD  41				INC		ECX							
 000001FE  EB F2			JMP		_startCOunt

 00000200			_doneCount:
				; done counting so store the value in stringLength
 00000200  83 F9 00			CMP		ECX, 0						; HERE IS THE SPECIAL CASE EXIT FOR NULL STRING
 00000203  74 23			JE		_exitProcedure
 00000205  89 4D F0			MOV		stringLength, ECX

 00000208  8B 45 F0			MOV		EAX, stringLength
 0000020B  E8 00000000 E		CALL	WriteInt


				COMMENT &
				; get and test the first character for certain criteria.
					CLD									; we want to go forwards
					MOV		ESI, [EBP + 8]				; first char in array

					LODSB								; get first character

				; test it for + or - or NULL
					CMP		AL, 43						; is it an ASCII + symbol?
					JE		_parseString
					CMP		AL, 45						; is it a minus sign?
					JE		_setMinusFlag
					CMP		AL, 0						; is the first byte NULL? invalid string!
					JE		_exitProcedure				; isValid is still 0

				; first char not a + or -? reset and begin parsing
					MOV		ESI, [EBP + 8]				; first char in array
					JMP		_parseString				; not + or -

				_setMinusFlag:
					MOV		foundNeg, 1


				; now we begin the parsing in earnest...
					MOV		ECX, 0						; set counter
				_parseString:
					MOV		EAX, 0						; clear register

					LODSB								; get byte into eax

					CMP		EAX, 0						; if "empty" then string done
					JE		_doneParse

					CMP		EAX, 48						; does the caracter come before ASCII 0?
					JB		_exitProcedure				; if so, terminaate with valid = 0

					CMP		EAX, 57						; does the caracter come after ASCII 9?
					JB		_exitProcedure				; if so, terminaate with valid = 0


					ADD		localValue, EAX				; add to localval
					JO		_exitProcedure				; if we generated an overflow, end with valid = 0

					ADD		ECX, 10

				&
 00000210			_doneParse:
 00000210  C7 45 FC			MOV		isValid, 1
	   00000001


				; see if our value is negative
 00000217  83 7D F4 FF			CMP		posOrNeg, -1
 0000021B  75 03			JNE		_storeNum					; not neg, can just store

 0000021D  F7 5D F8			NEG		localValue					; negative, we negate value


				; this is how we SAVE THE VALUE
 00000220			_storeNum:
 00000220  8B 45 F8			MOV		EAX, localValue
 00000223  8B 5D 0C			MOV		EBX, [EBP + 12]
 00000226  89 03			MOV		[EBX], EAX 

 00000228			_exitProcedure:
				; store final result of isValid
 00000228  8B 45 FC			MOV		EAX, isValid
 0000022B  8B 5D 10			MOV		EBX, [EBP + 16]
 0000022E  89 03			MOV		[EBX], EAX



				; byebye
 00000230  61				POPAD
 00000231  C9		   *	    leave  
 00000232  C2 000C			RET		12

 00000235			readVal ENDP
Proj6_bearan.asm(463) : warning A6004:procedure argument or local not referenced : specialBoah


				;---------------------------------------------------------------------------------------------
				; Name: writeVal
				;
				; Writes SDWORD value using mDisplayString macro. THe algorithm is a bit odd. Uses a temp
				; array to store values, working backwards doing division by 10, storing the remainder as ASCII.
				; Once fully calculated, it prints the array (forwards of course!)
				;
				; Preconditions:	
				; Postconditions:	
				; Receives:			[EBP + 8] -- SDWORD value to be printed	
				;					[EBP + 12] -- address of temp array for scratch work
				; Returns:			Outputs value as a string, using mDisplayString macro
				;----------------------------------------------------------------------------------------------
 00000235			writeVal PROC
				; prep stack, save registers
				; use some local variables for fun
					LOCAL	localVal:SDWORD, arrayEnd:DWORD, negFlag:DWORD, specialFlag:DWORD
 00000235  55		   *	    push   ebp
 00000236  8B EC	   *	    mov    ebp, esp
 00000238  83 C4 F0	   *	    add    esp, 0FFFFFFF0h
 0000023B  50				PUSH	EAX
 0000023C  53				PUSH	EBX
 0000023D  52				PUSH	EDX
 0000023E  57				PUSH	EDI

				; get offset value to last usable idex of array -- remember it's MAXCHARS + 1 long,
				; but we reserve the last ,0 to terminate the output
 0000023F  B8 0000000B			MOV		EAX, MAXCHARS
 00000244  89 45 F8			MOV		arrayEnd, EAX				
					
				; retrieve value to print, and set negFlag = 0
 00000247  8B 45 08			MOV		EAX, [EBP + 8]				; Rretrieve value from stack
 0000024A  C7 45 F4			MOV		negFlag, 0					; set flag for non-negative
	   00000000
 00000251  83 F8 00			CMP		EAX, 0						; test for negativity
 00000254  7D 1F			JGE		_notNegative

				; initialize the special case flag to 0, and test for presence of -2,147,483,648
 00000256  C7 45 F0			MOV		specialFlag, 0
	   00000000
 0000025D  3D 80000000			CMP		EAX, -2147483648			; test for -2,147,483,648 -- this bastard thing
 00000262  75 08			JNE		_notSpeeshul				; not our boah

				; rut-roh, we found it...
 00000264  40				INC		EAX							; bump it up to -2,147,483,647 for the next steps
 00000265  C7 45 F0			MOV		specialFlag, 1
	   00000001

				; negate number nad set neg flag for later use
 0000026C			_notSpeeshul:
 0000026C  F7 D8			NEG		EAX							; negate
 0000026E  C7 45 F4			MOV		negFlag, 1					; set flag
	   00000001

				; wasn't negative, so no special cases or anything
 00000275			_notNegative:
 00000275  89 45 FC			MOV		localVal, EAX				; store the value

				; get address of array, and find target location
 00000278  8B 7D 0C			MOV		EDI, [EBP + 12]
 0000027B  03 7D F8			ADD		EDI, arrayEnd				; increment to target location in array

 0000027E  FD				STD									; decrementing

				; start of the calculating/storing loop
 0000027F			_startLoop:
				; sequence of dividing by 10, and storing the remainder in the array as element to print
 0000027F  8B 45 FC			MOV		EAX, localVal				; set up for divison
 00000282  99				CDQ		
 00000283  BB 0000000A			MOV		EBX, 10
 00000288  F7 FB			IDIV	EBX

				; store the quotient for the next round
 0000028A  89 45 FC			MOV		localVal, EAX				; divided number to localval

				; test for the "special case" flag
 0000028D  83 7D F0 01			CMP		specialFlag, 1
 00000291  75 08			JNE		_asciiAdd					; not special

				; bump the value up (the LSB 7 becomes 8)
 00000293  42				INC		EDX
 00000294  C7 45 F0			MOV		specialFlag, 0				; clear flag so it never happens again
	   00000000

				; convert to ASCII by adding 48, and store in the array
 0000029B			_asciiAdd:
 0000029B  83 C2 30			ADD		EDX, 48						; this converts it into ASCII equivalent!
 0000029E  8B C2			MOV		EAX, EDX
 000002A0  AA				STOSB

				; if the quotient is 0, we've done enough math
 000002A1  83 7D FC 00			CMP		localVal, 0					; remainder 0, we're done dividing
 000002A5  74 02			JE		_doneDiv					; exit loop

 000002A7  EB D6			JMP		_startLoop					; restart loop

				; done dividing, do some output
 000002A9			_doneDiv:	 
				; test to see if it's a negative number
 000002A9  83 7D F4 01			CMP		negFlag, 1
 000002AD  75 06			JNE		_printArray					; not neg, just print

				; number was negative? write the ASCII for a negative sign into the array!
 000002AF  B8 0000002D			MOV		EAX, 45						; negative sign
 000002B4  AA				STOSB

				; Print the finalized array!
 000002B5			_printArray:
 000002B5  8B C7			MOV		EAX, EDI
 000002B7  83 C0 01			ADD		EAX, 1						; readjust to account for last STOSB
					mDisplayString	EAX					; mDisplayString just works on an offset :D
 000002BA  52		     1		PUSH	EDX							; uses EDX so we protect it
 000002BB  8B D0	     1		MOV		EDX, EAX			; standard writeString call
 000002BD  E8 00000000 E     1		CALL	WriteString
 000002C2  5A		     1		POP		EDX

				; cleanup and exit
 000002C3  5F				POP		EDI
 000002C4  5A				POP		EDX
 000002C5  5B				POP		EBX
 000002C6  58				POP		EAX
 000002C7  C9		   *	    leave  
 000002C8  C2 0008			RET		8

 000002CB			writeVal ENDP


				END main
Microsoft (R) Macro Assembler Version 14.29.30138.0	    03/02/22 00:46:58
<Project 6: String Primitives and Macros     (Proj6_bearan.a  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003BE Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000002CB Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000014F Public STDCALL
  _fillArray . . . . . . . . . .	L Near	 00000016 _TEXT	
  _validValue  . . . . . . . . .	L Near	 0000005F _TEXT	
  _doneFill  . . . . . . . . . .	L Near	 000000AE _TEXT	
  _displayLoop . . . . . . . . .	L Near	 000000D0 _TEXT	
  _endDisplay  . . . . . . . . .	L Near	 000000F5 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
readVal  . . . . . . . . . . . .	P Near	 0000014F _TEXT	Length= 000000E6 Public STDCALL
  isValid  . . . . . . . . . . .	DWord	 bp - 00000004
  localValue . . . . . . . . . .	DWord	 bp - 00000008
  posOrNeg . . . . . . . . . . .	DWord	 bp - 0000000C
  stringLength . . . . . . . . .	DWord	 bp - 00000010
  specialBoah  . . . . . . . . .	Byte	 bp - 00000011
  _scanForSpecial  . . . . . . .	L Near	 0000019E _TEXT	
  _checkSign . . . . . . . . . .	L Near	 000001B3 _TEXT	
  _setPlus . . . . . . . . . . .	L Near	 000001D2 _TEXT	
  _setMinus  . . . . . . . . . .	L Near	 000001DB _TEXT	
  _countString . . . . . . . . .	L Near	 000001E2 _TEXT	
  _startCOunt  . . . . . . . . .	L Near	 000001F2 _TEXT	
  _doneCount . . . . . . . . . .	L Near	 00000200 _TEXT	
  _doneParse . . . . . . . . . .	L Near	 00000210 _TEXT	
  _storeNum  . . . . . . . . . .	L Near	 00000220 _TEXT	
  _exitProcedure . . . . . . . .	L Near	 00000228 _TEXT	
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
writeVal . . . . . . . . . . . .	P Near	 00000235 _TEXT	Length= 00000096 Public STDCALL
  localVal . . . . . . . . . . .	DWord	 bp - 00000004
  arrayEnd . . . . . . . . . . .	DWord	 bp - 00000008
  negFlag  . . . . . . . . . . .	DWord	 bp - 0000000C
  specialFlag  . . . . . . . . .	DWord	 bp - 00000010
  _notSpeeshul . . . . . . . . .	L Near	 0000026C _TEXT	
  _notNegative . . . . . . . . .	L Near	 00000275 _TEXT	
  _startLoop . . . . . . . . . .	L Near	 0000027F _TEXT	
  _asciiAdd  . . . . . . . . . .	L Near	 0000029B _TEXT	
  _doneDiv . . . . . . . . . . .	L Near	 000002A9 _TEXT	
  _printArray  . . . . . . . . .	L Near	 000002B5 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYLENGTH  . . . . . . . . . .	Number	 00000005h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MAXCHARS . . . . . . . . . . . .	Number	 0000000Bh   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
USERSTRLENGTH  . . . . . . . . .	Number	 00000010h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
avgValues  . . . . . . . . . . .	DWord	 000003BA _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byePrompt  . . . . . . . . . . .	Byte	 000002E9 _DATA	
cBracket . . . . . . . . . . . .	Byte	 00000359 _DATA	
comma  . . . . . . . . . . . . .	Byte	 0000035B _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enteredVals  . . . . . . . . . .	Byte	 0000031B _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
invalidNum . . . . . . . . . . .	Byte	 00000238 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
linebreak  . . . . . . . . . . .	Byte	 0000035E _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
negSign  . . . . . . . . . . . .	Byte	 00000361 _DATA	
numArray . . . . . . . . . . . .	DWord	 00000363 _DATA	
numAverage . . . . . . . . . . .	Byte	 000002BC _DATA	
numEntry . . . . . . . . . . . .	Byte	 00000216 _DATA	
numSum . . . . . . . . . . . . .	Byte	 0000029D _DATA	
numsEntered  . . . . . . . . . .	Byte	 0000026F _DATA	
oBracket . . . . . . . . . . . .	Byte	 00000357 _DATA	
padding  . . . . . . . . . . . .	Byte	 000003A0 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
runTotal . . . . . . . . . . . .	DWord	 000003B2 _DATA	
specialNum . . . . . . . . . . .	Byte	 00000377 _DATA	
subTotMsg  . . . . . . . . . . .	Byte	 0000033D _DATA	
sumValues  . . . . . . . . . . .	DWord	 000003B6 _DATA	
tempArray  . . . . . . . . . . .	Byte	 000003A5 _DATA	
userString . . . . . . . . . . .	Byte	 00000390 _DATA	
userVal  . . . . . . . . . . . .	DWord	 0000038C _DATA	
validVal . . . . . . . . . . . .	DWord	 00000388 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   1 Warnings
	   0 Errors
